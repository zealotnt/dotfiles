#!/bin/bash

alias bfg='java -jar ~/bin/bfg.jar'

# Borrow from globalias, but I dont want to expand all alias, so I bind Alt+SPACE to expand the alias instead
# https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/globalias/globalias.plugin.zsh
globalias() {
  if [[ $LBUFFER =~ 'kk' ]]; then
    zle _expand_alias
    zle expand-word
  fi
  zle self-insert
}

globalias_forced() {
  zle _expand_alias
  zle expand-word
  zle self-insert
}
zle -N globalias
zle -N globalias_forced

# space only expand enabled-to-expand-aliases
bindkey -M emacs " " globalias
bindkey -M viins " " globalias
# alt+space expands all aliases
bindkey -M emacs "^[ " globalias_forced
bindkey -M viins "^[ " globalias_forced

bindkey -r '^Z'
bindkey -r '^U'
bindkey "^Z" undo
bindkey "^U" undo

space-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == \ * ]]; then
        LBUFFER="${LBUFFER# }"
    else
        LBUFFER=" $LBUFFER"
    fi
}
zle -N space-command-line
bindkey -M emacs '``' space-command-line

# >>>>>>>>>>>>>>>>>>>>>>>>>>> Setting things up >>>>>>>>>>>>>>>>>>>>>>>>>>>
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
	platform='linux'
elif [[ "$unamestr" == 'FreeBSD' ]]; then
	platform='freebsd'
fi

export NVM_DIR="$HOME/.nvm"

alias loadnvm='[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"; [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"'


unalias ll
ll() {
  EXA=$(which exa)
  $EXA --colour=always -alh $@
}

lr() {
  EXA=$(which exa)
  $EXA --colour=always -t=modified -l -snew $@
}
unalias l
alias l='lr'
if [[ "$OSTYPE" == linux-gnu ]]; then  # Is this the Ubuntu system?
    alias ls='/bin/ls --color=always -1 -t --group-directories-first '
else
    alias ll='gls -Flh --group-directories-first'
fi

alias libreoffice='libreoffice6.3'

# https://www.cyberciti.biz/faq/linux-unix-formatting-dates-for-display/
alias curfull='date +"%Y%m%d-%H%M%S"'
alias curtime='date +"%H%M%S"'
alias curtimeunix='date +%s'
alias curtimeepoch='date +%s'
alias curdate='date +"%Y%m%d"'
mtDisplayTime() {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && printf '%d days ' $D
  (( $H > 0 )) && printf '%d hours ' $H
  (( $M > 0 )) && printf '%d minutes ' $M
  (( $D > 0 || $H > 0 || $M > 0 )) && printf 'and '
  printf '%d seconds\n' $S
}

alias tf='terraform'
alias hl='helm list'
alias hh='helm history'
alias hst='helm status'
alias hgv='helm get values'
alias hgm='helm get manifest'
alias kctx='kubectl ctx' # use krew to manage plugin
alias kns='kubectl ns'

alias watch='GRC_COLOR=on watch -n 0.5 --color ' # https://unix.stackexchange.com/questions/25327/watch-command-alias-expansion
open() {
  xdg-open $@ > /dev/null 2>&1
}
alias ]='open'
alias -g G='| grep --color=always'
alias histPry='e ~/.pry_history'
alias histZsh='e ~/.zsh_history'
alias editDotfiles='e ~/dotfiles/'
alias editEmacs='e ~/workspace_mine/w_emacs_dotfiles/emacs.org'
alias kk='kill -9'
alias picocom='picocom -e x'
alias minicom='minicom -m'
alias cat='bat'
alias catp='bat -p'
alias parse_yaml='ruby ~/workspace_mine/w_emacs_dotfiles/packages/yaml-imenu/parse_yaml.rb'

# My Color code
export ANSI_ENDL="\r\n"
export ANSI_NRM="\033[0m"
export ANSI_RED="\033[31m"
export ANSI_GRN="\033[32m"
export ANSI_YEL="\033[33m"
export ANSI_BLU="\033[34m"
export ANSI_MAG="\033[35m"
export ANSI_CYN="\033[36m"
export ANSI_WHT="\033[37m"
export ANSI_LGRN="\033[92m"
export ANSI_LRED="\033[91m"
export ANSI_LYEL="\033[93m"
export ANSI_LBLU="\033[94m"
export ANSI_LMAG="\033[95m"
export ANSI_LCYN="\033[96m"
# Console style print
export ANSI_BOLD="\033[1m"
export ANSI_UDLN="\033[4m"
# Reset all settings of console print
export ANSI_RESET="\033[0m"
export ANSI_RBOLD="\033[21m"

unalias z
z() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
  else
    _last_z_args="$@"
    _z "$@"
  fi
}
zz() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
}
alias j=z
alias jj=zz

# fo [FUZZY PATTERN] - Open the selected file with the default editor/xdg-open
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fo() {
  local out file key
  IFS=$'\n' out=("$(fzf-tmux --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)")
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    # https://stackoverflow.com/questions/12806987/unix-command-to-escape-spaces
    # file=$(printf %q "$file")
    [ "$key" = ctrl-e ] && eval ${EDITOR:-vim} "$file" || open "$file" > /dev/null 2>&1
  fi
}

fman() {
    man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

# fuzzy grep open via ag with line number
vg() {
  local file
  local line

  read -r file line <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
  fi
}

# make MAC prefers GNU's coreutils
# https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities
if [[ "$OSTYPE" == "darwin"* ]]; then
  alias readlink='greadlink '
  alias find='gfind '
fi

# >>>>>>>>>>>>>>>>>>>>>>>>>>> Start Overide Scripts >>>>>>>>>>>>>>>>>>>>>>>>>>>
hard-backward-delete-word() {
  local WORDCHARS="${WORDCHARS}/\\:@"
  zle backward-delete-word
}

hard-forward-delete-word() {
  local WORDCHARS="${WORDCHARS}/\\:@"
  zle delete-word
}

zle -N hard-backward-delete-word
zle -N hard-forward-delete-word
bindkey -r '^[w'
bindkey -r '^[d'
bindkey '^[w' hard-backward-delete-word
bindkey '^[d' hard-forward-delete-word

if [[ $platform == 'linux' ]]; then
	# Overwrite the tree command, make it cooperate with less
	tree() {
		/usr/bin/tree -C $@ | less
	}

	# Overwrite the subl method, support the `mtsearchStr` utility
	subl() {
		/usr/bin/subl $(sed 's/^\(.*\):\([0-9]*\):.*/\1:\2/' <<< $1)
	}
fi

stw() {
	args=$@
	if [[ $args* == which* ]]; then
		echo "1"
		subl $($@)
	else
		echo "2"
		subl $(which $@)
	fi
}
# Overide the rsync method, automatically create folder, archive mode, verbose, use relative path name, show progress
# [Ref1](http://stackoverflow.com/questions/9242135/how-to-force-rsync-to-create-destination-folder)
# [Ref2](http://stackoverflow.com/questions/12314451/accessing-bash-command-line-args-vs)
# rsync() {
# 	/usr/bin/rsync -avRP $*
# }

# Overwrite pwd method, make it always specify the -P flag
pwd() {
	# -P      Display the physical current working directory (all symbolic links resolved).
	/bin/pwd -P
}

# Overide nautilus app, make it open current directory if no argument is passed
nautilus() {
	if [[ $# == 0 ]]; then
		echo "No argument"
		/usr/bin/nautilus .
	else
		# if has any argument, call nautilus as normal
		/usr/bin/nautilus $@
	fi
}

emp() {
  local TMP;
  TMP="$(mktemp /tmp/emacsstdinXXX)";
  cat >"$TMP";
  emacsclient -create-frame --alternate-editor /usr/bin/false --eval "(let ((b (create-file-buffer \"*stdin*\"))) (switch-to-buffer b) (insert-file-contents \"${TMP}\") (delete-file \"${TMP}\") (select-frame-set-input-focus (selected-frame) (delete-other-windows)))"  > /dev/null 2>&1 &
  # wmctrl -l -> get windowid
  # xdotool -> focus new opened window
}

em() {
  if [[ "$@" == "" ]]; then
    nohup emacsclient -create-frame --alternate-editor="" . > /dev/null 2>&1 &
  else
    nohup emacsclient -create-frame --alternate-editor="" "$@" > /dev/null 2>&1 &
  fi
}

e() {
  if [[ "$@" == "" ]]; then
    emacsclient -nw -create-frame --alternate-editor="" .
  else
    emacsclient -nw -create-frame --alternate-editor="" "$@"
  fi
}

# https://stackoverflow.com/questions/36565295/jq-to-replace-text-directly-on-file-like-sed-i
jqip() {
  if [[ $# == 0 ]]; then
    echo "Require argument"
    return
	fi
  jq . $1 | sponge $1
}

flash_ergo() {
	if [[ $# == 0 ]]; then
		echo "Specified ergodox hex firmware please"
    return
	fi

  TEENSY_CLI=$(which teensy_loader_cli)
  sudo $TEENSY_CLI --mcu=atmega32u4 -w -v $1
}


# https://unix.stackexchange.com/questions/391181/freezing-the-history-file-temporarily
freeze_history () {
    fc -p $HISTFILE
    unset HISTFILE
}
# and
unfreeze_history () {
    fc -P
}

alias remove_whitespace="find -name \"* *\" -type f | rename 's/ /_/g'"
# >>>>>>>>>>>>>>>>>>>>>>>>>>> End Overide Scripts >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if [[ $platform == 'linux' ]]; then
  # https://stackoverflow.com/questions/1251999/how-can-i-replace-a-newline-n-using-sed
	alias scl='tee /dev/tty | tr --delete "\r" | tr --delete "\n" | xclip -selection c'
	alias copy=scl
  alias xget=scl
  alias xput='xclip -selection clipboard -o'
else
	alias copy="tr -d '\n' | pbcopy"
fi

mtdu() {
	# https://unix.stackexchange.com/questions/4681/how-do-you-sort-du-output-by-size
	du -h -d 1 | sort -h
}

mtless() {
	less -M -N -R $@
}

cdpwd() {
	cd $(pwd)
}

cdreal() {
	cdpwd
}

realpathcp() {
	realpath $@ | copy
}
function catcp {
  emulate -L zsh
  clipcopy $1
}
alias pwdcp="pwd | copy"
alias path='realpath'
alias pathcp='realpathcp'

mtInstall_grc() {
  local CUR_DIR=$(pwd)
  cd ~/workspace_misc/grc/
  sudo ./install.sh
  cd $CUR_DIR
}

mtConfirmDialog() {
  if (dialog --title "Message" --yesno "Want to do something risky?" 6 25)
  then
    true
  else
    false
  fi
}

mtConfirmInline() {
  DEFAULT_PROMPT="?Are you sure\? [y/N] ?"

	if [[ $# == 0 ]]; then
    PROMT=$DEFAULT_PROMPT
  else
    PROMT="?$1 [y/N]?"
	fi

  read $PROMT response
  case "$response" in
      [yY][eE][sS]|[yY])
          true
          ;;
      *)
          false
          ;;
  esac
}

mtconfirm () {
	# call with a prompt string or use a default
	read -r -p "${1:-Are you sure? [y/N]} " response
	case $response in
	# Any `yes` or `y`
	[yY][eE][sS]|[yY])
		true
		;;
	*)  false
		;;
	esac
}

mtPATHPrependPath() {
	if [[ $# != 1 ]]; then
		echo "Usage:"
		echo " $FUNCNAME <directory path to prepend to PATH>"
		return
	fi

	prependPath=$1
	if [[ ! -d $prependPath ]]; then
		echo "$path not found !!!"
		return
	fi

	export PATH=$prependPath:$PATH
	echo -e "**************CURRENT_PATH*****************"
	echo -e "$PATH"
	echo -e "*******************************************"
}

mtPATHAppendPath() {
	if [[ $# != 1 ]]; then
		echo "Usage:"
		echo " $FUNCNAME <directory path to append to PATH>"
		return
	fi

	appendPath=$1
	if [[ ! -d $appendPath ]]; then
		echo "$appendPath not found !!!"
		return
	fi

	export PATH=$PATH:$appendPath
	echo -e "**************CURRENT_PATH*****************"
	echo -e "$PATH"
	echo -e "*******************************************"
}

mtPATHRemovePath() {
	if [[ $# != 1 ]]; then
		echo "Usage:"
		echo " $FUNCNAME <directory to remove from PATH>"
		return
	fi

	removed_path=:$1
	export PATH=${PATH/$removed_path/}
	echo -e "**************CURRENT_PATH*****************"
	echo -e "$PATH"
	echo -e "*******************************************"
}

mtSetTitle(){
	if [[ -z "$ORIG" ]]; then
		ORIG=$PS1
	fi
	TITLE="\[\e]2;$*\a\]"
	PS1=${ORIG}${TITLE}
}

mtstatoctal() {
	if [ $# == 1 ]; then
		stat -c "%a %n" $1
	else
		stat -c "%a %n" *
	fi
}

mtscpFunc() {
	scp -rp $1 root@192.168.100.15:$2
}

mtfindUSB() {
	ls /dev/ | grep -E '(ttyUSB|ttyACM)'
}

mteditBash() {
	# res=$(egrep "User's Constant" ~/.bashrc -n)
	# Only get the first result
	# subl ~/.bashrc:$(sed 's/^\([0-9]*\):.*/\1/' <<< $res | head -n 1)
	# subl ${FILES[@]}
	$EDITOR -n ~/dotfiles ~/.tmux.conf
}

mtapplyBash() {
	# source ~/.bashrc
	source ~/.zshrc
}

mtsaveBash() {
	echo "Copy ~/.bashrc to Dropbox folder: "
	colordiff $DROPBOX_BASHRC_FILE_PATH ~/.bashrc
	if [[ $? == 0 ]]; then
		echo "No diff, no need to save"
		return 1
	fi
	echo "This script going to overwrite the Dropbox bashrc file"
	mtconfirm && (cp ~/.bashrc $DROPBOX_BASHRC_FILE_PATH; echo "File updated") || echo "Abort update"
}

mtunmount_all() {
	sudo umount /dev/sdc*
	sudo umount /dev/mmcblk*
}

mtwanip() {
if [ $# == 1 ]; then
	dig +short $1
else
	dig +short myip.opendns.com @resolver1.opendns.com
fi
}

mtsearchHistory() {
	history | grep "$1"
}

mtsearchStr() {
	usage() {
		echo "Usage: "
		echo "  $FUNCNAME <pattern>                 -> search pattern in all files"
		echo "  $FUNCNAME <pattern> <file_types>    -> search pattern in all files"
	}

	case $# in
	1)
		echo -e "${KYEL}${KBOLD}"
		echo -e "***********************************************"
		echo -e "Search pattern \"$1\" in all file_types"
		echo -e "***********************************************"
		echo -e "${KRESET}"
		egrep "$1" -R ./* -n
		;;
	2)
		echo -e "${KYEL}${KBOLD}"
		echo -e "***********************************************"
		echo -e "Search pattern \"$1\" in \"$2\" file_types"
		echo -e "***********************************************"
		echo -e "${KRESET}"
		grep -E $1 ./ -r --include \*.$2
		;;
	*)  usage
		;;
	esac
}

mtsearchFile() {
	usage() {
		echo "Usage: "
		echo "  $FUNCNAME <pattern>                 -> search file with file's name pattern recursively"
	}

	case $# in
	1)
		echo -e "${KYEL}${KBOLD}"
		echo -e "***********************************************"
		echo -e "Search file's name pattern \"$1\" recursively"
		echo -e "***********************************************"
		echo -e "${KRESET}"
		find . -name $1
		;;
	*)  usage
		;;
	esac
}

mtrename() {
	usage() {
		echo "Usage: "
		echo "  $FUNCNAME <file-name>                 -> replace space in <file-name> with _"
	}

	case $# in
	1)
		echo -e "${KYEL}${KBOLD}"
		echo -e "***********************************************"
		echo -e "Replace filename which contain \"$1\" with _"
		echo -e "***********************************************"
		echo -e "${KRESET}"
		rename "s/\s+/_/g" $1
		;;
	*)  usage
		;;
	esac
}

mtopenConsole() {
	usage() {
		echo "Usage: "
		echo "  $FUNCNAME <com-port>                 -> open <com-port> with 115200 baudrate"
	}

	case $# in
	1)
		picocom -b 115200 $1
		;;
	*)  usage
		;;
	esac

}
###############################################################################
### WebDev Scripts
###############################################################################
#############################
# Monolithic developments
#############################
mtwebDockerStart() {
	docker-machine start default
	docker-machine env
	eval $(docker-machine env)
}

mtwebDockerRmAllCtn() {
	usage() {
		echo "Usage: "
		echo "  $FUNCNAME [-e]"
		echo "      -e: Remove all exited container"
	}

	case $# in
	0)  echo "Stoping all container"
		docker stop $(docker ps -a -q)
		echo "Remove all suspended container"
		docker rm $(docker ps -a -q)
		;;
	1)  case $1 in
		-e) echo "Remove all exited container"
			docker rm $(docker ps -aqf status=exited)
			;;
		*)  usage
			;;
		esac
		;;
	*)  usage
		;;
	esac
}

mtwebDockerStopAllCtn() {
	echo "Stoping all container"
	docker stop $(docker ps -a -q)
}

#############################
# Microservice developments
#############################
MICROSERVICE_PRJ_PATH=~/workspace_pif-store/piflab-api-microservice

mtwebMicroCompose() {
	cd $MICROSERVICE_PRJ_PATH
	# Start db_product
	docker-compose up
}

mtwebDockerBash() {
	docker exec -it $(docker ps -a -q -f "name=$1") bash
}


#############################
# Golang developments
#############################
GOLANG_TEST_PATH=~/workspace_pif-store/golang

mtgolangDoc() {
	godoc -http=:6060
}

mtgolangStartTest() {
	cd $GOLANG_TEST_PATH
	export $(cat .env)
	cd $GOLANG_TEST_PATH/src/test
	echo "Ready for golang tweaking"
}

alias webLAMP="/opt/lampp/manager-linux-x64.run"
alias prettyjson='python -m json.tool'

#############################
# Git macro, Extend git commands
#############################
cdgit() {
	cd $(git root)
}

# circleci aliases
function ci() {
  open https://circleci.com/gh/Thinkei/workflows/$1
}

function cio() {
  ci `basename $(pwd)`
}

function cc() {
  ci `basename $(pwd)`/tree/"${$(git rev-parse --abbrev-ref HEAD)//\//%2F}"
}

changeGitEmail() {
git filter-branch --env-filter '
WRONG_EMAIL="tam.tran@employmenthero.com"
NEW_EMAIL="tranminhtam.10192@gmail.com"

if [ "$GIT_COMMITTER_EMAIL" = "$WRONG_EMAIL" ]
then
	export GIT_COMMITTER_EMAIL="$NEW_EMAIL"
fi
if [ "$GIT_AUTHOR_EMAIL" = "$WRONG_EMAIL" ]
then
	export GIT_AUTHOR_EMAIL="$NEW_EMAIL"
fi
' --tag-name-filter cat -- --branches --tags
}

cdwork () {
	echo "Move to $(realpath ~/cdwork) and appear as ~/cdwork"
	cd ~/cdwork
	cdpwd
}

lnwork () {
	DIR=`pwd`

	if [ $# -ne 1 ]; then
		printf "Usage:\n\t $FUNCNAME <path-to-make-workdir-symlink>\n"
		return
	fi

	args=$1
	# Check if the user wants to set the alsolute path
	if [[ $args == /* ]]; then
		path_set=$args
	# Else it is relative path
	else
		# Remove dot if any
		args="${args//.}"

		# if user input something like `lnwork ./somedir`, it is still capable
		if [[ $args == /* ]]; then
			path_set=$DIR$args
		else
			path_set=$DIR/$args
		fi
	fi

	echo "Set ~/cdwork to $path_set"
	rm ~/cdwork
	ln -s $path_set ~/cdwork
}

lgad () {
    # loop grep awk do
    # $1: command
    # $2: grep string
    # $3: awk position; default: $1
    # $4: command do to each ite

    # https://unix.stackexchange.com/questions/444946/how-can-we-run-a-command-stored-in-a-variable
    eval "$1" | grep $2 | for i in $(awk '{print $1}');
    do
      eval "$3"
    done
}

##################
### Python utility path
mtUsePython2() {
	sudo rm /usr/bin/python
	sudo ln -s /usr/bin/python2.7 /usr/bin/python
}

mtUsePython3() {
	sudo rm /usr/bin/python
	sudo ln -s /usr/bin/python3.5 /usr/bin/python
}

mtPythonSitePackages() {
	usage() {
		printf "Usage:\t $1 <site-packages path print option>\n"
		printf "\t\t1: Global site-packages (\"dist-packages\") directories are listed in sys.path\n"
		printf "\t\t2: a more concise list run getsitepackages from the site module in Python code\n"
		printf "\t\t3: The per user site-packages directory (PEP 370) is where Python installs your local packages\n"
		printf "\t\tFor more info, [ref](https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory)\n"
		return
	}
	case $1 in
	1)	python -m site
		;;
	2)	python -c "import site; print(site.getsitepackages())"
		;;
	3)	python -m site --user-site
		;;
	*)  usage $FUNCNAME
		;;
	esac
}

benchZsh() {
	time zsh -i -c exit
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>> Employment Hero scripts >>>>>>>>>>>>>>>>>>>>>>>>>>>
herostag() {
	hero $@ --context $STAGING_CLUSTER
}
alias heroclistag='HERO_ACCESS_TOKEN=$HERO_ACCESS_TOKEN_STG herocli --server hero2.staging.ehrocks.com:443'

heroprod() {
	hero $@ --context $PRODUCTION_CLUSTER
}
alias herocliprod='HERO_ACCESS_TOKEN=$HERO_ACCESS_TOKEN_PRD herocli --server hero2.ehrocks.com:443'
alias herocliint='HERO_ACCESS_TOKEN=$HERO_ACCESS_TOKEN_INT herocli --server hero2.integration.ehrocks.com:443'

##################
### K8s scripts
mtkubectlRestartPod() {
	if ! { [ $# -eq 1 ] || [ $# -eq 3 ] }; then
		# https://unix.stackexchange.com/questions/247187/bash-if-not-multiple-conditions-without-subshell
		printf "Usage:\t $1 <pod-id> (for default namespace, or)\n"
		printf "      \t $1 <pod-id> -n <namespace>\n"
		return
	fi

	kubectl get pod $@ -o yaml |\
	kubectl replace --grace-period=1 --force  -f -
}

k8sStripIp() {
	awk '{print $1}' | sed -E -n -e 's/^ip-(.*)\.ap.*/\1/p' | sed 's/-/\./g'
}

mtStripIp() {
	echo $@ | stripK8sIp
}

k8sGetIp() {
  # Test cases:
  # ip-11-22-33-444.ap-southeast-2.compute.internal
  # root@ip-10-30-34-245:/home/admin#

  # sed -E -n -e 's/regexStr/\1/p' -> not work, suck...
  # sed -E -n -e 's/(.*)\./\1/p' -> this is not working again
  # https://stackoverflow.com/questions/9522631/how-to-put-a-line-comment-for-a-multi-line-command
  # https://github.com/learnbyexample/Command-line-text-processing/blob/master/ruby_one_liners.md
  xput | awk '{print $1}' \
    | gawk 'match($0, /^.*ip-([0-9\-\.^:]*).*/, ary) {print ary[1]}' \
    | sed 's/-/\./g'                 `# replace - to .` \
    | ruby -pe "gsub(/(\d+\.\d+\.\d+\.\d+)[^0-9]*/, '\1')" `# remove last dot`
}

alias cissh='ssh -i ~/.ssh/keys/git@bit@git.pri'
ehssh() {
  chars=$(xput | wc -c)
  if [[ $chars -lt 15 ]]; then # 3*4+3 ~ 15
    echo "ssh -i $EH_SSH_KEY -l ubuntu $(xput)"
    ssh -i $EH_SSH_KEY -l ubuntu $(xput)
  else
    echo "ssh -i $EH_SSH_KEY -l ubuntu $(k8sGetIp)"
    ssh -i $EH_SSH_KEY -l ubuntu $(k8sGetIp)
  fi
}

alias kgnop="kgno | stripK8sIp"

kt_prometheus() {
    local APP_NAMESPACE=agents
    export POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=prometheus,component=server" -o jsonpath="{.items[0].metadata.name}")
    echo -e "prometheus-server:\r\n\t$POD_NAME"
    kubectl -c prometheus-server --namespace $APP_NAMESPACE exec -i -t $POD_NAME sh
}

kt_am() {
    local APP_NAMESPACE=agents
    export POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=prometheus,component=alertmanager" -o jsonpath="{.items[0].metadata.name}")
    echo -e "prometheus-alertmanager:\r\n\t$POD_NAME"
    kubectl --namespace $APP_NAMESPACE exec -i -t $POD_NAME sh
}

klf_prometheus() {
    local APP_NAMESPACE=agents
    export POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=prometheus,component=server" -o jsonpath="{.items[0].metadata.name}")
    echo -e "prometheus-server:\r\n\t$POD_NAME"
    kubectl logs -f -c prometheus-server -n $APP_NAMESPACE $POD_NAME --since 5m
}

pf_pushgateway() {
    local APP_NAMESPACE=agents
    export POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=prometheus,component=pushgateway" -o jsonpath="{.items[0].metadata.name}")
    echo -e "Pushgateway:\r\n\t$POD_NAME"
    kubectl --namespace $APP_NAMESPACE port-forward $POD_NAME 9091
}

kt_pushgateway() {
    local APP_NAMESPACE=agents
    export POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=prometheus,component=pushgateway" -o jsonpath="{.items[0].metadata.name}")
    echo -e "Pushgateway:\r\n\t$POD_NAME"
    kubectl --namespace $APP_NAMESPACE exec -i -t $POD_NAME sh
}

kt_infra_stat() {
    local GRC_COLOR_OLD=$GRC_COLOR
    export GRC_COLOR=auto
    CURRENT_CONTEXT=$(kubectl config current-context)
    [[ $CURRENT_CONTEXT =~ .*prod.* ]] && local APP_NAMESPACE=application || local APP_NAMESPACE=staging
    [[ $CURRENT_CONTEXT =~ .*prod.* ]] && local APP_LABELS="app=eh-infra-stat-service-web" || local APP_LABELS="app=eh-infra-stat-web"
    POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "$APP_LABELS" -o jsonpath="{.items[0].metadata.name}")
    echo -e "eh-infra-stat-service-web:\r\n\t$POD_NAME"
    kubectl --namespace $APP_NAMESPACE exec -i -t $POD_NAME bash
    export GRC_COLOR=$GRC_COLOR_OLD
}

kt_db_analytics() {
    local GRC_COLOR_OLD=$GRC_COLOR
    export GRC_COLOR=auto
    local APP_NAMESPACE=staging
    POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=db-analytics-web" -o jsonpath="{.items[0].metadata.name}")
    echo -e "Db-analytics-web:\r\n\t$POD_NAME"
    kubectl --namespace $APP_NAMESPACE exec -i -t $POD_NAME bash
    export GRC_COLOR=$GRC_COLOR_OLD
}

kt_am_proxy() {
    local GRC_COLOR_OLD=$GRC_COLOR
    export GRC_COLOR=auto
    local APP_NAMESPACE=devops
    POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=am-proxy-web" -o jsonpath="{.items[0].metadata.name}")
    echo -e "Am-proxy-web:\r\n\t$POD_NAME"
    kubectl --namespace $APP_NAMESPACE exec -i -t $POD_NAME bash
    export GRC_COLOR=$GRC_COLOR_OLD
}

kpf_prometheus() {
    local GRC_COLOR_OLD=$GRC_COLOR
    export GRC_COLOR=auto
    CURRENT_CONTEXT=$(kubectl config current-context)
    local APP_NAMESPACE=agents
    POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app=prometheus,component=server,release=prometheus" -o jsonpath="{.items[0].metadata.name}")
    echo "kong-pod:\r\n\tkubectl port-forward $POD_NAME --namespace $APP_NAMESPACE 9091:9090"
    kubectl port-forward $POD_NAME --namespace $APP_NAMESPACE 9091:9090
    export GRC_COLOR=$GRC_COLOR_OLD
}

kpf_kong() {
    local GRC_COLOR_OLD=$GRC_COLOR
    export GRC_COLOR=auto
    CURRENT_CONTEXT=$(kubectl config current-context)
    [[ $CURRENT_CONTEXT =~ .*prod.* ]] && local APP_NAMESPACE=gateway || local APP_NAMESPACE=devops
    POD_NAME=$(kubectl get pods --namespace $APP_NAMESPACE -l "app.kubernetes.io/instance=kong-gateway,app.kubernetes.io/component=app" -o jsonpath="{.items[0].metadata.name}")
    echo "kong-pod:\r\n\tkubectl port-forward $POD_NAME --namespace $APP_NAMESPACE 8444:8444"
    kubectl port-forward $POD_NAME --namespace $APP_NAMESPACE 8444:8444
    export GRC_COLOR=$GRC_COLOR_OLD
}

start/grafana() {
  docker start grafana || docker run -d --user $(id -u) \
         --volume "/home/zealot/dotfiles/applications-config/grafana:/var/lib/grafana" \
         -e "GF_PATHS_CONFIG=/var/lib/grafana/grafana.ini" \
         -e "GF_RENDERER_PLUGIN_VERBOSE_LOGGING=true" \
         -e "GF_LOG_FILTERS=rendering:debug" \
         --name=grafana --network=host grafana/grafana:7.2.0-ubuntu
  # xdg-open http://localhost:2999 > /dev/null 2>&1
}

get/grafana/dashboard_uid() {
  DASHBOARD_SLUG=$1
  DB_UID=$(curl -H "Authorization: Bearer $LOCAL_GRAFANA_API_TOKEN" \
           http://localhost:2999/api/dashboards/db/$DASHBOARD_SLUG | jq -r '.dashboard.uid')
  echo $DB_UID
}

get/grafana/dashboard_titles() {
  RES=$(curl -H "Authorization: Bearer $LOCAL_GRAFANA_API_TOKEN" \
  http://localhost:2999/api/search)
  GRAFANA_TITLES=$(echo $RES | jq -r '.[].title')
  GRAFANA_UIDS=$(echo $RES | jq -r '.[].uid')
}

open/grafana/dashboard_uid() {
  DB_UID=$1
  xdg-open http://localhost:2999/d/$DB_UID > /dev/null 2>&1
}

open/grafana/node-exporter() {
  DB_UID=$(get/grafana/dashboard_uid node-exporter-full)
  open/grafana/dashboard_uid $DB_UID
}

start/pgadmin4() {
  docker start pgadmin4 ||  docker run -d -e PGADMIN_LISTEN_PORT=2998 -e SESSION_DB_PATH=/pgadmin -e "PGADMIN_DEFAULT_EMAIL=$PGADMIN_DEFAULT_EMAIL" \
         -e "PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD" \
         --name=pgadmin4 --network=host dpage/pgadmin4 \
         > /dev/null 2>&1
  xdg-open http://localhost:2998 > /dev/null 2>&1
}

op/xiaofang() {
  open rtsp://$XIAOMI_XIAOFANG_IP:8554/unicast
}

op/adb-connect() {
  adb connect $ANDROID_PHONE_IP:5555
}

op/wifi-transfer-pro() {
  open http://$ANDROID_PHONE_IP:1234
}

op/unlock() {
  # https://stackoverflow.com/questions/29072501/how-to-unlock-android-phone-through-adb
  # for a list of KEYCODE, visit https://developer.android.com/reference/android/view/KeyEvent
  op/adb-connect
  sleep 0.5
  adb shell input keyevent KEYCODE_MENU && adb shell input text $ANDROID_PHONE_LOCK_PIN && adb shell input keyevent KEYCODE_ENTER
}

op/lock() {
  op/adb-connect
  sleep 0.5
  adb shell input keyevent KEYCODE_POWER
}

op/aom() {
  op/adb-connect
  sleep 0.5
  adb shell input keyevent KEYCODE_HOME
  adb shell input tap 752 284
  adb shell input tap 441 1844
}

hack/disable_osk() {
  # hacky way to disable annoying on screen keyboard
  gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled true
  gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled false
}

remoteCommand() {
  # https://stackoverflow.com/questions/3834839/how-to-escape-a-double-quote-inside-double-quotes
  echo -e 'export DISPLAY=$(w | grep $USER | grep gdm | awk \x27{print $3}\x27)'
}

sync_push_folder() {
  declare -A mapping
  # mapping[CMP]=pc.zep
  # mapping[zephyr]=pc.cmp
  mapping[CMP]=vpn.zep
  mapping[zephyr]=vpn.cmp

  FROM=$1
  DEST=$(realpath $FROM)
  # TODO: if FROM is a directory, automatically add trailing / to it
  #       this will make the path is "correct"
  echo "rsync --no-relative -a -r $FROM zealot@${mapping[$HOST]}:$DEST"
  mtConfirmInline "Are you sure to push from $FROM to ${mapping[$HOST]}:$DEST" && \
  rsync --no-relative -a -r $FROM zealot@${mapping[$HOST]}:$DEST
}

sync_pull_folder() {
  declare -A mapping
  # mapping[CMP]=pc.zep
  # mapping[zephyr]=pc.cmp
  mapping[CMP]=vpn.zep
  mapping[zephyr]=vpn.cmp

  FROM=$1
  DEST=$(realpath $FROM)
  # TODO: if FROM is a directory, automatically add trailing / to it
  #       this will make the path is "correct"
  echo "rsync --no-relative -a -r zealot@${mapping[$HOST]}:$DEST $FROM"
  mtConfirmInline "Are you sure to pull from ${mapping[$HOST]}:$DEST to $FROM" && \
  rsync --no-relative -a -r zealot@${mapping[$HOST]}:$DEST $FROM
}

unix_time() {
  # TODO: handle ms, us case
  # TODO: if there is an argument, use it over clipboard
  date -d @$(xput)
}

toggle_room_light() {
  curl http://192.168.31.232/toggle
}


toggle_balcony_light() {
  curl http://192.168.31.159/toggle
}

toggle_fan() {
  . ~/dotfiles/scripts/toggle_fan.sh $@
}

toggle_air_con() {
  . ~/dotfiles/scripts/toggle_air_con.sh $@
}

aws_testing_cli() {
  docker run --rm -it -e "AWS_ACCESS_KEY_ID=$AWS_TESTING_ACCESS_KEY_ID" \
         -e "AWS_SECRET_ACCESS_KEY=$AWS_TESTING_SECRET_ACCESS_KEY" \
         -e "AWS_PROFILE=$AWS_TESTING_PROFILE" \
         -v ~/.aws:/root/.aws amazon/aws-cli $@
}

laptop_keyboard_setup() {
  setxkbmap -option altwin:swap_alt_win
  setxkbmap -option ctrl:nocaps
  xcape -e 'Control_L=Escape'
  xset r rate 169 80
}

youtube-dl-playlist-numbered() {
  echo "youtube-dl -cio '%(autonumber)s-%(title)s.%(ext)s' $@"
  youtube-dl -cio '%(autonumber)s-%(title)s.%(ext)s' $@
}

convert_xls_to_csv() {
  libreoffice --headless --convert-to csv $1
  # libreoffice --headless --convert-to csv --outdir output_csv $1
}

find_desktop_file_location() {
  fd $@ /usr/local/share/applications /usr/share/applications/ ~/.local/share/applications/
}

vscodeUser() {
    if [[ "$OSTYPE" == linux-gnu ]]; then  # Is this the Ubuntu system?
        cd $HOME/.config/Code/User
    else
        cd $HOME/Library/Application\ Support/Code/User
    fi
}

